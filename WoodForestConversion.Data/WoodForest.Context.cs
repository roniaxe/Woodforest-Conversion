//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WoodForestConversion.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ARCHONEntities : DbContext
    {
        public ARCHONEntities()
            : base("name=ARCHONEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AuditVerification_> AuditVerification_ { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<Condition> Conditions { get; set; }
        public virtual DbSet<ConditionGroupRelationship> ConditionGroupRelationships { get; set; }
        public virtual DbSet<ConditionSet> ConditionSets { get; set; }
        public virtual DbSet<ExecutionModule> ExecutionModules { get; set; }
        public virtual DbSet<GlobalCondition> GlobalConditions { get; set; }
        public virtual DbSet<GlobalConditionGroup> GlobalConditionGroups { get; set; }
        public virtual DbSet<ImportError> ImportErrors { get; set; }
        public virtual DbSet<ImportErrorGroup> ImportErrorGroups { get; set; }
        public virtual DbSet<ImportValidation> ImportValidations { get; set; }
        public virtual DbSet<IndexArchive> IndexArchives { get; set; }
        public virtual DbSet<Job> Jobs { get; set; }
        public virtual DbSet<JobArchive> JobArchives { get; set; }
        public virtual DbSet<JobInstance> JobInstances { get; set; }
        public virtual DbSet<JobService> JobServices { get; set; }
        public virtual DbSet<JobStep> JobSteps { get; set; }
        public virtual DbSet<JobStepArchive> JobStepArchives { get; set; }
        public virtual DbSet<JobStepInstance> JobStepInstances { get; set; }
        public virtual DbSet<JobVersion> JobVersions { get; set; }
        public virtual DbSet<JobVersionEventType> JobVersionEventTypes { get; set; }
        public virtual DbSet<Keyword> Keywords { get; set; }
        public virtual DbSet<MarkedForArchive> MarkedForArchives { get; set; }
        public virtual DbSet<Note> Notes { get; set; }
        public virtual DbSet<NoteArchive> NoteArchives { get; set; }
        public virtual DbSet<Operator> Operators { get; set; }
        public virtual DbSet<ProgressIndicator> ProgressIndicators { get; set; }
        public virtual DbSet<ProgressIndicatorArchive> ProgressIndicatorArchives { get; set; }
        public virtual DbSet<ServiceCategory> ServiceCategories { get; set; }
        public virtual DbSet<ServiceModule> ServiceModules { get; set; }
        public virtual DbSet<StatusChange> StatusChanges { get; set; }
        public virtual DbSet<StatusChangeArchive> StatusChangeArchives { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<TargetService> TargetServices { get; set; }
        public virtual DbSet<ImportValidation_20110807> ImportValidation_20110807 { get; set; }
        public virtual DbSet<ImportValidation_20111204> ImportValidation_20111204 { get; set; }
        public virtual DbSet<ImportValidation_20120916> ImportValidation_20120916 { get; set; }
        public virtual DbSet<ImportValidation_20120923> ImportValidation_20120923 { get; set; }
        public virtual DbSet<ImportValidation_20120926> ImportValidation_20120926 { get; set; }
        public virtual DbSet<ImportValidation_20121226> ImportValidation_20121226 { get; set; }
        public virtual DbSet<ImportValidation_20130922> ImportValidation_20130922 { get; set; }
        public virtual DbSet<ImportValidation_20130929> ImportValidation_20130929 { get; set; }
        public virtual DbSet<ImportValidation_20181216> ImportValidation_20181216 { get; set; }
        public virtual DbSet<ImportValidation_20190127> ImportValidation_20190127 { get; set; }
        public virtual DbSet<ImportValidation_bad20120916> ImportValidation_bad20120916 { get; set; }
        public virtual DbSet<temp_FileList_20150511> temp_FileList_20150511 { get; set; }
        public virtual DbSet<temp_ImportValidation11232008> temp_ImportValidation11232008 { get; set; }
        public virtual DbSet<temp_ImportValidation20091011> temp_ImportValidation20091011 { get; set; }
        public virtual DbSet<tmpSQLOpsBackup> tmpSQLOpsBackups { get; set; }
        public virtual DbSet<JobService1> JobService1 { get; set; }
        public virtual DbSet<JobInformation> JobInformations { get; set; }
        public virtual DbSet<JobTimeDuration> JobTimeDurations { get; set; }
        public virtual DbSet<Keyword_Mapping> Keyword_Mapping { get; set; }
    
        public virtual ObjectResult<string> Category_Get(Nullable<System.Guid> categoryUID)
        {
            var categoryUIDParameter = categoryUID.HasValue ?
                new ObjectParameter("CategoryUID", categoryUID) :
                new ObjectParameter("CategoryUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Category_Get", categoryUIDParameter);
        }
    
        public virtual ObjectResult<Category_GetAll_Result> Category_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Category_GetAll_Result>("Category_GetAll");
        }
    
        public virtual int Category_Save(Nullable<System.Guid> categoryUID, string categoryName)
        {
            var categoryUIDParameter = categoryUID.HasValue ?
                new ObjectParameter("CategoryUID", categoryUID) :
                new ObjectParameter("CategoryUID", typeof(System.Guid));
    
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Category_Save", categoryUIDParameter, categoryNameParameter);
        }
    
        public virtual int Condition_Delete(Nullable<System.Guid> conditionUID)
        {
            var conditionUIDParameter = conditionUID.HasValue ?
                new ObjectParameter("ConditionUID", conditionUID) :
                new ObjectParameter("ConditionUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Condition_Delete", conditionUIDParameter);
        }
    
        public virtual int Condition_Save(Nullable<System.Guid> conditionUID, Nullable<System.Guid> entityUID, Nullable<System.Guid> setUID, Nullable<byte> conditionType, Nullable<System.Guid> referenceUID, Nullable<byte> dateInterval, Nullable<byte> primaryFrequency, Nullable<byte> secondaryFrequency, Nullable<bool> oncePerDay, Nullable<System.DateTime> afterTimeUtc, Nullable<System.DateTime> beforeTimeUtc, Nullable<bool> useLocal, string directory, string fileExists, Nullable<byte> packageType, Nullable<int> processDateModifier, Nullable<bool> isNegative, Nullable<bool> isLive)
        {
            var conditionUIDParameter = conditionUID.HasValue ?
                new ObjectParameter("ConditionUID", conditionUID) :
                new ObjectParameter("ConditionUID", typeof(System.Guid));
    
            var entityUIDParameter = entityUID.HasValue ?
                new ObjectParameter("EntityUID", entityUID) :
                new ObjectParameter("EntityUID", typeof(System.Guid));
    
            var setUIDParameter = setUID.HasValue ?
                new ObjectParameter("SetUID", setUID) :
                new ObjectParameter("SetUID", typeof(System.Guid));
    
            var conditionTypeParameter = conditionType.HasValue ?
                new ObjectParameter("ConditionType", conditionType) :
                new ObjectParameter("ConditionType", typeof(byte));
    
            var referenceUIDParameter = referenceUID.HasValue ?
                new ObjectParameter("ReferenceUID", referenceUID) :
                new ObjectParameter("ReferenceUID", typeof(System.Guid));
    
            var dateIntervalParameter = dateInterval.HasValue ?
                new ObjectParameter("DateInterval", dateInterval) :
                new ObjectParameter("DateInterval", typeof(byte));
    
            var primaryFrequencyParameter = primaryFrequency.HasValue ?
                new ObjectParameter("PrimaryFrequency", primaryFrequency) :
                new ObjectParameter("PrimaryFrequency", typeof(byte));
    
            var secondaryFrequencyParameter = secondaryFrequency.HasValue ?
                new ObjectParameter("SecondaryFrequency", secondaryFrequency) :
                new ObjectParameter("SecondaryFrequency", typeof(byte));
    
            var oncePerDayParameter = oncePerDay.HasValue ?
                new ObjectParameter("OncePerDay", oncePerDay) :
                new ObjectParameter("OncePerDay", typeof(bool));
    
            var afterTimeUtcParameter = afterTimeUtc.HasValue ?
                new ObjectParameter("AfterTimeUtc", afterTimeUtc) :
                new ObjectParameter("AfterTimeUtc", typeof(System.DateTime));
    
            var beforeTimeUtcParameter = beforeTimeUtc.HasValue ?
                new ObjectParameter("BeforeTimeUtc", beforeTimeUtc) :
                new ObjectParameter("BeforeTimeUtc", typeof(System.DateTime));
    
            var useLocalParameter = useLocal.HasValue ?
                new ObjectParameter("UseLocal", useLocal) :
                new ObjectParameter("UseLocal", typeof(bool));
    
            var directoryParameter = directory != null ?
                new ObjectParameter("Directory", directory) :
                new ObjectParameter("Directory", typeof(string));
    
            var fileExistsParameter = fileExists != null ?
                new ObjectParameter("FileExists", fileExists) :
                new ObjectParameter("FileExists", typeof(string));
    
            var packageTypeParameter = packageType.HasValue ?
                new ObjectParameter("PackageType", packageType) :
                new ObjectParameter("PackageType", typeof(byte));
    
            var processDateModifierParameter = processDateModifier.HasValue ?
                new ObjectParameter("ProcessDateModifier", processDateModifier) :
                new ObjectParameter("ProcessDateModifier", typeof(int));
    
            var isNegativeParameter = isNegative.HasValue ?
                new ObjectParameter("IsNegative", isNegative) :
                new ObjectParameter("IsNegative", typeof(bool));
    
            var isLiveParameter = isLive.HasValue ?
                new ObjectParameter("IsLive", isLive) :
                new ObjectParameter("IsLive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Condition_Save", conditionUIDParameter, entityUIDParameter, setUIDParameter, conditionTypeParameter, referenceUIDParameter, dateIntervalParameter, primaryFrequencyParameter, secondaryFrequencyParameter, oncePerDayParameter, afterTimeUtcParameter, beforeTimeUtcParameter, useLocalParameter, directoryParameter, fileExistsParameter, packageTypeParameter, processDateModifierParameter, isNegativeParameter, isLiveParameter);
        }
    
        public virtual int ConditionGroupRelationship_Add(Nullable<System.Guid> setUID, Nullable<System.Guid> globalUID)
        {
            var setUIDParameter = setUID.HasValue ?
                new ObjectParameter("SetUID", setUID) :
                new ObjectParameter("SetUID", typeof(System.Guid));
    
            var globalUIDParameter = globalUID.HasValue ?
                new ObjectParameter("GlobalUID", globalUID) :
                new ObjectParameter("GlobalUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ConditionGroupRelationship_Add", setUIDParameter, globalUIDParameter);
        }
    
        public virtual int ConditionGroupRelationship_Delete(Nullable<System.Guid> setUID, Nullable<System.Guid> globalUID)
        {
            var setUIDParameter = setUID.HasValue ?
                new ObjectParameter("SetUID", setUID) :
                new ObjectParameter("SetUID", typeof(System.Guid));
    
            var globalUIDParameter = globalUID.HasValue ?
                new ObjectParameter("GlobalUID", globalUID) :
                new ObjectParameter("GlobalUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ConditionGroupRelationship_Delete", setUIDParameter, globalUIDParameter);
        }
    
        public virtual ObjectResult<Nullable<System.Guid>> ConditionGroupRelationship_Get(Nullable<System.Guid> setUID)
        {
            var setUIDParameter = setUID.HasValue ?
                new ObjectParameter("SetUID", setUID) :
                new ObjectParameter("SetUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.Guid>>("ConditionGroupRelationship_Get", setUIDParameter);
        }
    
        public virtual ObjectResult<Conditions_GetByEntity_Result> Conditions_GetByEntity(Nullable<System.Guid> entityUID)
        {
            var entityUIDParameter = entityUID.HasValue ?
                new ObjectParameter("EntityUID", entityUID) :
                new ObjectParameter("EntityUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Conditions_GetByEntity_Result>("Conditions_GetByEntity", entityUIDParameter);
        }
    
        public virtual int ConditionSet_Delete(Nullable<System.Guid> setUID)
        {
            var setUIDParameter = setUID.HasValue ?
                new ObjectParameter("SetUID", setUID) :
                new ObjectParameter("SetUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ConditionSet_Delete", setUIDParameter);
        }
    
        public virtual int ConditionSet_Save(Nullable<System.Guid> setUID, Nullable<System.Guid> entityUID, Nullable<System.Guid> parentSet, Nullable<byte> matching, Nullable<bool> isNegative, Nullable<bool> isLive)
        {
            var setUIDParameter = setUID.HasValue ?
                new ObjectParameter("SetUID", setUID) :
                new ObjectParameter("SetUID", typeof(System.Guid));
    
            var entityUIDParameter = entityUID.HasValue ?
                new ObjectParameter("EntityUID", entityUID) :
                new ObjectParameter("EntityUID", typeof(System.Guid));
    
            var parentSetParameter = parentSet.HasValue ?
                new ObjectParameter("ParentSet", parentSet) :
                new ObjectParameter("ParentSet", typeof(System.Guid));
    
            var matchingParameter = matching.HasValue ?
                new ObjectParameter("Matching", matching) :
                new ObjectParameter("Matching", typeof(byte));
    
            var isNegativeParameter = isNegative.HasValue ?
                new ObjectParameter("IsNegative", isNegative) :
                new ObjectParameter("IsNegative", typeof(bool));
    
            var isLiveParameter = isLive.HasValue ?
                new ObjectParameter("IsLive", isLive) :
                new ObjectParameter("IsLive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ConditionSet_Save", setUIDParameter, entityUIDParameter, parentSetParameter, matchingParameter, isNegativeParameter, isLiveParameter);
        }
    
        public virtual ObjectResult<ExecutionModule_Get_Result> ExecutionModule_Get(Nullable<System.Guid> moduleUID)
        {
            var moduleUIDParameter = moduleUID.HasValue ?
                new ObjectParameter("ModuleUID", moduleUID) :
                new ObjectParameter("ModuleUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ExecutionModule_Get_Result>("ExecutionModule_Get", moduleUIDParameter);
        }
    
        public virtual ObjectResult<ExecutionModule_GetAll_Result> ExecutionModule_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ExecutionModule_GetAll_Result>("ExecutionModule_GetAll");
        }
    
        public virtual int ExecutionModule_Save(Nullable<System.Guid> moduleUID, string moduleName, string moduleAssembly, string moduleObject)
        {
            var moduleUIDParameter = moduleUID.HasValue ?
                new ObjectParameter("ModuleUID", moduleUID) :
                new ObjectParameter("ModuleUID", typeof(System.Guid));
    
            var moduleNameParameter = moduleName != null ?
                new ObjectParameter("ModuleName", moduleName) :
                new ObjectParameter("ModuleName", typeof(string));
    
            var moduleAssemblyParameter = moduleAssembly != null ?
                new ObjectParameter("ModuleAssembly", moduleAssembly) :
                new ObjectParameter("ModuleAssembly", typeof(string));
    
            var moduleObjectParameter = moduleObject != null ?
                new ObjectParameter("ModuleObject", moduleObject) :
                new ObjectParameter("ModuleObject", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ExecutionModule_Save", moduleUIDParameter, moduleNameParameter, moduleAssemblyParameter, moduleObjectParameter);
        }
    
        public virtual ObjectResult<string> GlobalCondition_Get(Nullable<System.Guid> globalUID)
        {
            var globalUIDParameter = globalUID.HasValue ?
                new ObjectParameter("GlobalUID", globalUID) :
                new ObjectParameter("GlobalUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GlobalCondition_Get", globalUIDParameter);
        }
    
        public virtual ObjectResult<GlobalCondition_GetAll_Result> GlobalCondition_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GlobalCondition_GetAll_Result>("GlobalCondition_GetAll");
        }
    
        public virtual int GlobalCondition_Save(Nullable<System.Guid> globalUID, string conditionName)
        {
            var globalUIDParameter = globalUID.HasValue ?
                new ObjectParameter("GlobalUID", globalUID) :
                new ObjectParameter("GlobalUID", typeof(System.Guid));
    
            var conditionNameParameter = conditionName != null ?
                new ObjectParameter("ConditionName", conditionName) :
                new ObjectParameter("ConditionName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GlobalCondition_Save", globalUIDParameter, conditionNameParameter);
        }
    
        public virtual ObjectResult<string> GlobalConditionGroup_Get(Nullable<System.Guid> setUID)
        {
            var setUIDParameter = setUID.HasValue ?
                new ObjectParameter("SetUID", setUID) :
                new ObjectParameter("SetUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GlobalConditionGroup_Get", setUIDParameter);
        }
    
        public virtual int GlobalConditionGroup_Save(Nullable<System.Guid> setUID, string setName)
        {
            var setUIDParameter = setUID.HasValue ?
                new ObjectParameter("SetUID", setUID) :
                new ObjectParameter("SetUID", typeof(System.Guid));
    
            var setNameParameter = setName != null ?
                new ObjectParameter("SetName", setName) :
                new ObjectParameter("SetName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GlobalConditionGroup_Save", setUIDParameter, setNameParameter);
        }
    
        public virtual int ImportError_Insert(Nullable<System.Guid> groupUID, string field, string fieldValue, string errorMessage)
        {
            var groupUIDParameter = groupUID.HasValue ?
                new ObjectParameter("GroupUID", groupUID) :
                new ObjectParameter("GroupUID", typeof(System.Guid));
    
            var fieldParameter = field != null ?
                new ObjectParameter("Field", field) :
                new ObjectParameter("Field", typeof(string));
    
            var fieldValueParameter = fieldValue != null ?
                new ObjectParameter("FieldValue", fieldValue) :
                new ObjectParameter("FieldValue", typeof(string));
    
            var errorMessageParameter = errorMessage != null ?
                new ObjectParameter("ErrorMessage", errorMessage) :
                new ObjectParameter("ErrorMessage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ImportError_Insert", groupUIDParameter, fieldParameter, fieldValueParameter, errorMessageParameter);
        }
    
        public virtual int ImportErrorGroup_Insert(Nullable<System.Guid> groupUID, Nullable<System.Guid> stepUID, Nullable<System.Guid> instanceUID, string line, Nullable<byte> failedAt)
        {
            var groupUIDParameter = groupUID.HasValue ?
                new ObjectParameter("GroupUID", groupUID) :
                new ObjectParameter("GroupUID", typeof(System.Guid));
    
            var stepUIDParameter = stepUID.HasValue ?
                new ObjectParameter("StepUID", stepUID) :
                new ObjectParameter("StepUID", typeof(System.Guid));
    
            var instanceUIDParameter = instanceUID.HasValue ?
                new ObjectParameter("InstanceUID", instanceUID) :
                new ObjectParameter("InstanceUID", typeof(System.Guid));
    
            var lineParameter = line != null ?
                new ObjectParameter("Line", line) :
                new ObjectParameter("Line", typeof(string));
    
            var failedAtParameter = failedAt.HasValue ?
                new ObjectParameter("FailedAt", failedAt) :
                new ObjectParameter("FailedAt", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ImportErrorGroup_Insert", groupUIDParameter, stepUIDParameter, instanceUIDParameter, lineParameter, failedAtParameter);
        }
    
        public virtual ObjectResult<ImportValidation_Get_Result> ImportValidation_Get(string serverName, string catelog, string tableName)
        {
            var serverNameParameter = serverName != null ?
                new ObjectParameter("ServerName", serverName) :
                new ObjectParameter("ServerName", typeof(string));
    
            var catelogParameter = catelog != null ?
                new ObjectParameter("Catelog", catelog) :
                new ObjectParameter("Catelog", typeof(string));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ImportValidation_Get_Result>("ImportValidation_Get", serverNameParameter, catelogParameter, tableNameParameter);
        }
    
        public virtual int ImportValidation_Update(string serverName, string catelog, string tableName, Nullable<long> importCount)
        {
            var serverNameParameter = serverName != null ?
                new ObjectParameter("ServerName", serverName) :
                new ObjectParameter("ServerName", typeof(string));
    
            var catelogParameter = catelog != null ?
                new ObjectParameter("Catelog", catelog) :
                new ObjectParameter("Catelog", typeof(string));
    
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            var importCountParameter = importCount.HasValue ?
                new ObjectParameter("ImportCount", importCount) :
                new ObjectParameter("ImportCount", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ImportValidation_Update", serverNameParameter, catelogParameter, tableNameParameter, importCountParameter);
        }
    
        public virtual int IndexArchive_Clear(string server, string catelog, string entity)
        {
            var serverParameter = server != null ?
                new ObjectParameter("Server", server) :
                new ObjectParameter("Server", typeof(string));
    
            var catelogParameter = catelog != null ?
                new ObjectParameter("Catelog", catelog) :
                new ObjectParameter("Catelog", typeof(string));
    
            var entityParameter = entity != null ?
                new ObjectParameter("Entity", entity) :
                new ObjectParameter("Entity", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("IndexArchive_Clear", serverParameter, catelogParameter, entityParameter);
        }
    
        public virtual ObjectResult<IndexArchive_Get_Result> IndexArchive_Get(string server, string catelog, string entity)
        {
            var serverParameter = server != null ?
                new ObjectParameter("Server", server) :
                new ObjectParameter("Server", typeof(string));
    
            var catelogParameter = catelog != null ?
                new ObjectParameter("Catelog", catelog) :
                new ObjectParameter("Catelog", typeof(string));
    
            var entityParameter = entity != null ?
                new ObjectParameter("Entity", entity) :
                new ObjectParameter("Entity", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<IndexArchive_Get_Result>("IndexArchive_Get", serverParameter, catelogParameter, entityParameter);
        }
    
        public virtual int IndexArchive_Save(string server, string catelog, string entity, string indexName, string indexDesc, string indexFields)
        {
            var serverParameter = server != null ?
                new ObjectParameter("Server", server) :
                new ObjectParameter("Server", typeof(string));
    
            var catelogParameter = catelog != null ?
                new ObjectParameter("Catelog", catelog) :
                new ObjectParameter("Catelog", typeof(string));
    
            var entityParameter = entity != null ?
                new ObjectParameter("Entity", entity) :
                new ObjectParameter("Entity", typeof(string));
    
            var indexNameParameter = indexName != null ?
                new ObjectParameter("IndexName", indexName) :
                new ObjectParameter("IndexName", typeof(string));
    
            var indexDescParameter = indexDesc != null ?
                new ObjectParameter("IndexDesc", indexDesc) :
                new ObjectParameter("IndexDesc", typeof(string));
    
            var indexFieldsParameter = indexFields != null ?
                new ObjectParameter("IndexFields", indexFields) :
                new ObjectParameter("IndexFields", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("IndexArchive_Save", serverParameter, catelogParameter, entityParameter, indexNameParameter, indexDescParameter, indexFieldsParameter);
        }
    
        public virtual int Job_Archive(Nullable<System.Guid> jobUID)
        {
            var jobUIDParameter = jobUID.HasValue ?
                new ObjectParameter("JobUID", jobUID) :
                new ObjectParameter("JobUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Job_Archive", jobUIDParameter);
        }
    
        public virtual int Job_Delete(Nullable<System.Guid> jobUID, Nullable<System.Guid> changedBy, string fromMachine)
        {
            var jobUIDParameter = jobUID.HasValue ?
                new ObjectParameter("JobUID", jobUID) :
                new ObjectParameter("JobUID", typeof(System.Guid));
    
            var changedByParameter = changedBy.HasValue ?
                new ObjectParameter("ChangedBy", changedBy) :
                new ObjectParameter("ChangedBy", typeof(System.Guid));
    
            var fromMachineParameter = fromMachine != null ?
                new ObjectParameter("FromMachine", fromMachine) :
                new ObjectParameter("FromMachine", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Job_Delete", jobUIDParameter, changedByParameter, fromMachineParameter);
        }
    
        public virtual ObjectResult<Job_Get_Result> Job_Get(Nullable<System.Guid> jobUID)
        {
            var jobUIDParameter = jobUID.HasValue ?
                new ObjectParameter("JobUID", jobUID) :
                new ObjectParameter("JobUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Job_Get_Result>("Job_Get", jobUIDParameter);
        }
    
        public virtual ObjectResult<Job_GetAll_Result> Job_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Job_GetAll_Result>("Job_GetAll");
        }
    
        public virtual ObjectResult<Job_GetByService_Result> Job_GetByService(Nullable<System.Guid> serviceUID)
        {
            var serviceUIDParameter = serviceUID.HasValue ?
                new ObjectParameter("ServiceUID", serviceUID) :
                new ObjectParameter("ServiceUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Job_GetByService_Result>("Job_GetByService", serviceUIDParameter);
        }
    
        public virtual ObjectResult<Nullable<System.Guid>> Job_GetChildren(Nullable<System.Guid> jobUID)
        {
            var jobUIDParameter = jobUID.HasValue ?
                new ObjectParameter("JobUID", jobUID) :
                new ObjectParameter("JobUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.Guid>>("Job_GetChildren", jobUIDParameter);
        }
    
        public virtual ObjectResult<Job_GetForService_Result> Job_GetForService(Nullable<System.Guid> serviceUID)
        {
            var serviceUIDParameter = serviceUID.HasValue ?
                new ObjectParameter("ServiceUID", serviceUID) :
                new ObjectParameter("ServiceUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Job_GetForService_Result>("Job_GetForService", serviceUIDParameter);
        }
    
        public virtual ObjectResult<Job_GetFromArchive_Result> Job_GetFromArchive(Nullable<System.Guid> instanceUID)
        {
            var instanceUIDParameter = instanceUID.HasValue ?
                new ObjectParameter("InstanceUID", instanceUID) :
                new ObjectParameter("InstanceUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Job_GetFromArchive_Result>("Job_GetFromArchive", instanceUIDParameter);
        }
    
        public virtual int Job_MakeLive(Nullable<System.Guid> jobUID, Nullable<bool> isLive, Nullable<System.Guid> changedBy, string fromMachine)
        {
            var jobUIDParameter = jobUID.HasValue ?
                new ObjectParameter("JobUID", jobUID) :
                new ObjectParameter("JobUID", typeof(System.Guid));
    
            var isLiveParameter = isLive.HasValue ?
                new ObjectParameter("IsLive", isLive) :
                new ObjectParameter("IsLive", typeof(bool));
    
            var changedByParameter = changedBy.HasValue ?
                new ObjectParameter("ChangedBy", changedBy) :
                new ObjectParameter("ChangedBy", typeof(System.Guid));
    
            var fromMachineParameter = fromMachine != null ?
                new ObjectParameter("FromMachine", fromMachine) :
                new ObjectParameter("FromMachine", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Job_MakeLive", jobUIDParameter, isLiveParameter, changedByParameter, fromMachineParameter);
        }
    
        public virtual int Job_Save(Nullable<System.Guid> jobUID, ObjectParameter displayID, string jobName, Nullable<byte> style, Nullable<System.Guid> category, Nullable<bool> requiresVerification, Nullable<byte> priority, Nullable<short> weight, Nullable<int> controls, Nullable<System.Guid> startStep, Nullable<byte> frequency, Nullable<int> interval, Nullable<System.DateTime> stopAtUtc, Nullable<int> archiveAfter, Nullable<byte> serviceLevel, Nullable<int> serviceDuration, Nullable<byte> alertSeverity, string note, string helpFile, Nullable<System.Guid> changedBy, string fromMachine, string snapshot)
        {
            var jobUIDParameter = jobUID.HasValue ?
                new ObjectParameter("JobUID", jobUID) :
                new ObjectParameter("JobUID", typeof(System.Guid));
    
            var jobNameParameter = jobName != null ?
                new ObjectParameter("JobName", jobName) :
                new ObjectParameter("JobName", typeof(string));
    
            var styleParameter = style.HasValue ?
                new ObjectParameter("Style", style) :
                new ObjectParameter("Style", typeof(byte));
    
            var categoryParameter = category.HasValue ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(System.Guid));
    
            var requiresVerificationParameter = requiresVerification.HasValue ?
                new ObjectParameter("RequiresVerification", requiresVerification) :
                new ObjectParameter("RequiresVerification", typeof(bool));
    
            var priorityParameter = priority.HasValue ?
                new ObjectParameter("Priority", priority) :
                new ObjectParameter("Priority", typeof(byte));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(short));
    
            var controlsParameter = controls.HasValue ?
                new ObjectParameter("Controls", controls) :
                new ObjectParameter("Controls", typeof(int));
    
            var startStepParameter = startStep.HasValue ?
                new ObjectParameter("StartStep", startStep) :
                new ObjectParameter("StartStep", typeof(System.Guid));
    
            var frequencyParameter = frequency.HasValue ?
                new ObjectParameter("Frequency", frequency) :
                new ObjectParameter("Frequency", typeof(byte));
    
            var intervalParameter = interval.HasValue ?
                new ObjectParameter("Interval", interval) :
                new ObjectParameter("Interval", typeof(int));
    
            var stopAtUtcParameter = stopAtUtc.HasValue ?
                new ObjectParameter("StopAtUtc", stopAtUtc) :
                new ObjectParameter("StopAtUtc", typeof(System.DateTime));
    
            var archiveAfterParameter = archiveAfter.HasValue ?
                new ObjectParameter("ArchiveAfter", archiveAfter) :
                new ObjectParameter("ArchiveAfter", typeof(int));
    
            var serviceLevelParameter = serviceLevel.HasValue ?
                new ObjectParameter("ServiceLevel", serviceLevel) :
                new ObjectParameter("ServiceLevel", typeof(byte));
    
            var serviceDurationParameter = serviceDuration.HasValue ?
                new ObjectParameter("ServiceDuration", serviceDuration) :
                new ObjectParameter("ServiceDuration", typeof(int));
    
            var alertSeverityParameter = alertSeverity.HasValue ?
                new ObjectParameter("AlertSeverity", alertSeverity) :
                new ObjectParameter("AlertSeverity", typeof(byte));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var helpFileParameter = helpFile != null ?
                new ObjectParameter("HelpFile", helpFile) :
                new ObjectParameter("HelpFile", typeof(string));
    
            var changedByParameter = changedBy.HasValue ?
                new ObjectParameter("ChangedBy", changedBy) :
                new ObjectParameter("ChangedBy", typeof(System.Guid));
    
            var fromMachineParameter = fromMachine != null ?
                new ObjectParameter("FromMachine", fromMachine) :
                new ObjectParameter("FromMachine", typeof(string));
    
            var snapshotParameter = snapshot != null ?
                new ObjectParameter("Snapshot", snapshot) :
                new ObjectParameter("Snapshot", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Job_Save", jobUIDParameter, displayID, jobNameParameter, styleParameter, categoryParameter, requiresVerificationParameter, priorityParameter, weightParameter, controlsParameter, startStepParameter, frequencyParameter, intervalParameter, stopAtUtcParameter, archiveAfterParameter, serviceLevelParameter, serviceDurationParameter, alertSeverityParameter, noteParameter, helpFileParameter, changedByParameter, fromMachineParameter, snapshotParameter);
        }
    
        public virtual ObjectResult<Job_SearchArchive_Result> Job_SearchArchive(Nullable<System.Guid> jobUID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var jobUIDParameter = jobUID.HasValue ?
                new ObjectParameter("JobUID", jobUID) :
                new ObjectParameter("JobUID", typeof(System.Guid));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Job_SearchArchive_Result>("Job_SearchArchive", jobUIDParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int JobInstance_Assign(Nullable<System.Guid> jobUID, Nullable<System.Guid> serviceUID)
        {
            var jobUIDParameter = jobUID.HasValue ?
                new ObjectParameter("JobUID", jobUID) :
                new ObjectParameter("JobUID", typeof(System.Guid));
    
            var serviceUIDParameter = serviceUID.HasValue ?
                new ObjectParameter("ServiceUID", serviceUID) :
                new ObjectParameter("ServiceUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("JobInstance_Assign", jobUIDParameter, serviceUIDParameter);
        }
    
        public virtual int JobInstance_ClearRestart(Nullable<System.Guid> instanceUID)
        {
            var instanceUIDParameter = instanceUID.HasValue ?
                new ObjectParameter("InstanceUID", instanceUID) :
                new ObjectParameter("InstanceUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("JobInstance_ClearRestart", instanceUIDParameter);
        }
    
        public virtual ObjectResult<JobInstance_Get_Result> JobInstance_Get(Nullable<System.Guid> jobUID)
        {
            var jobUIDParameter = jobUID.HasValue ?
                new ObjectParameter("JobUID", jobUID) :
                new ObjectParameter("JobUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<JobInstance_Get_Result>("JobInstance_Get", jobUIDParameter);
        }
    
        public virtual int JobInstance_MetDependencies(Nullable<System.Guid> instanceUID, Nullable<bool> metDependencies)
        {
            var instanceUIDParameter = instanceUID.HasValue ?
                new ObjectParameter("InstanceUID", instanceUID) :
                new ObjectParameter("InstanceUID", typeof(System.Guid));
    
            var metDependenciesParameter = metDependencies.HasValue ?
                new ObjectParameter("MetDependencies", metDependencies) :
                new ObjectParameter("MetDependencies", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("JobInstance_MetDependencies", instanceUIDParameter, metDependenciesParameter);
        }
    
        public virtual int JobInstance_OnStep(Nullable<System.Guid> instanceUID, Nullable<System.Guid> onStep)
        {
            var instanceUIDParameter = instanceUID.HasValue ?
                new ObjectParameter("InstanceUID", instanceUID) :
                new ObjectParameter("InstanceUID", typeof(System.Guid));
    
            var onStepParameter = onStep.HasValue ?
                new ObjectParameter("OnStep", onStep) :
                new ObjectParameter("OnStep", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("JobInstance_OnStep", instanceUIDParameter, onStepParameter);
        }
    
        public virtual int JobInstance_Reset(Nullable<System.Guid> jobUID)
        {
            var jobUIDParameter = jobUID.HasValue ?
                new ObjectParameter("JobUID", jobUID) :
                new ObjectParameter("JobUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("JobInstance_Reset", jobUIDParameter);
        }
    
        public virtual int JobInstance_ResetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("JobInstance_ResetAll");
        }
    
        public virtual int JobInstance_ResetCategory(Nullable<System.Guid> category)
        {
            var categoryParameter = category.HasValue ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("JobInstance_ResetCategory", categoryParameter);
        }
    
        public virtual ObjectResult<JobInstance_Spawn_Result> JobInstance_Spawn(Nullable<System.Guid> jobUID)
        {
            var jobUIDParameter = jobUID.HasValue ?
                new ObjectParameter("JobUID", jobUID) :
                new ObjectParameter("JobUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<JobInstance_Spawn_Result>("JobInstance_Spawn", jobUIDParameter);
        }
    
        public virtual ObjectResult<JobService_Get_Result> JobService_Get(string serviceName, Nullable<System.Guid> serviceUID)
        {
            var serviceNameParameter = serviceName != null ?
                new ObjectParameter("ServiceName", serviceName) :
                new ObjectParameter("ServiceName", typeof(string));
    
            var serviceUIDParameter = serviceUID.HasValue ?
                new ObjectParameter("ServiceUID", serviceUID) :
                new ObjectParameter("ServiceUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<JobService_Get_Result>("JobService_Get", serviceNameParameter, serviceUIDParameter);
        }
    
        public virtual ObjectResult<JobService_GetAll_Result> JobService_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<JobService_GetAll_Result>("JobService_GetAll");
        }
    
        public virtual ObjectResult<JobService_GetByPool_Result> JobService_GetByPool(Nullable<byte> jobPool)
        {
            var jobPoolParameter = jobPool.HasValue ?
                new ObjectParameter("JobPool", jobPool) :
                new ObjectParameter("JobPool", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<JobService_GetByPool_Result>("JobService_GetByPool", jobPoolParameter);
        }
    
        public virtual ObjectResult<Nullable<System.Guid>> JobService_GetMasterService(Nullable<byte> jobPool)
        {
            var jobPoolParameter = jobPool.HasValue ?
                new ObjectParameter("JobPool", jobPool) :
                new ObjectParameter("JobPool", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.Guid>>("JobService_GetMasterService", jobPoolParameter);
        }
    
        public virtual ObjectResult<JobService_Register_Result> JobService_Register(string serviceName)
        {
            var serviceNameParameter = serviceName != null ?
                new ObjectParameter("ServiceName", serviceName) :
                new ObjectParameter("ServiceName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<JobService_Register_Result>("JobService_Register", serviceNameParameter);
        }
    
        public virtual int JobService_ReportIn(Nullable<System.Guid> serviceUID)
        {
            var serviceUIDParameter = serviceUID.HasValue ?
                new ObjectParameter("ServiceUID", serviceUID) :
                new ObjectParameter("ServiceUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("JobService_ReportIn", serviceUIDParameter);
        }
    
        public virtual int JobService_Save(Nullable<System.Guid> serviceUID, string serviceName, Nullable<byte> serviceType, Nullable<byte> jobPool, Nullable<bool> available, Nullable<short> capacity, ObjectParameter result)
        {
            var serviceUIDParameter = serviceUID.HasValue ?
                new ObjectParameter("ServiceUID", serviceUID) :
                new ObjectParameter("ServiceUID", typeof(System.Guid));
    
            var serviceNameParameter = serviceName != null ?
                new ObjectParameter("ServiceName", serviceName) :
                new ObjectParameter("ServiceName", typeof(string));
    
            var serviceTypeParameter = serviceType.HasValue ?
                new ObjectParameter("ServiceType", serviceType) :
                new ObjectParameter("ServiceType", typeof(byte));
    
            var jobPoolParameter = jobPool.HasValue ?
                new ObjectParameter("JobPool", jobPool) :
                new ObjectParameter("JobPool", typeof(byte));
    
            var availableParameter = available.HasValue ?
                new ObjectParameter("Available", available) :
                new ObjectParameter("Available", typeof(bool));
    
            var capacityParameter = capacity.HasValue ?
                new ObjectParameter("Capacity", capacity) :
                new ObjectParameter("Capacity", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("JobService_Save", serviceUIDParameter, serviceNameParameter, serviceTypeParameter, jobPoolParameter, availableParameter, capacityParameter, result);
        }
    
        public virtual int JobStep_Delete(Nullable<System.Guid> stepUID, Nullable<System.Guid> changedBy, string fromMachine, string snapshot)
        {
            var stepUIDParameter = stepUID.HasValue ?
                new ObjectParameter("StepUID", stepUID) :
                new ObjectParameter("StepUID", typeof(System.Guid));
    
            var changedByParameter = changedBy.HasValue ?
                new ObjectParameter("ChangedBy", changedBy) :
                new ObjectParameter("ChangedBy", typeof(System.Guid));
    
            var fromMachineParameter = fromMachine != null ?
                new ObjectParameter("FromMachine", fromMachine) :
                new ObjectParameter("FromMachine", typeof(string));
    
            var snapshotParameter = snapshot != null ?
                new ObjectParameter("Snapshot", snapshot) :
                new ObjectParameter("Snapshot", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("JobStep_Delete", stepUIDParameter, changedByParameter, fromMachineParameter, snapshotParameter);
        }
    
        public virtual int JobStep_FixBrokenSteps()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("JobStep_FixBrokenSteps");
        }
    
        public virtual ObjectResult<JobStep_Get_Result> JobStep_Get(Nullable<System.Guid> stepUID)
        {
            var stepUIDParameter = stepUID.HasValue ?
                new ObjectParameter("StepUID", stepUID) :
                new ObjectParameter("StepUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<JobStep_Get_Result>("JobStep_Get", stepUIDParameter);
        }
    
        public virtual ObjectResult<JobStep_GetByJob_Result> JobStep_GetByJob(Nullable<System.Guid> jobUID)
        {
            var jobUIDParameter = jobUID.HasValue ?
                new ObjectParameter("JobUID", jobUID) :
                new ObjectParameter("JobUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<JobStep_GetByJob_Result>("JobStep_GetByJob", jobUIDParameter);
        }
    
        public virtual ObjectResult<JobStep_GetForAll_Result> JobStep_GetForAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<JobStep_GetForAll_Result>("JobStep_GetForAll");
        }
    
        public virtual int JobStep_Save(Nullable<System.Guid> stepUID, Nullable<System.Guid> jobUID, string stepName, Nullable<System.Guid> moduleUID, Nullable<System.Guid> onSuccess, Nullable<System.Guid> onFailure, Nullable<bool> canRestart, string configurationFile, string helpFile, Nullable<bool> isLive)
        {
            var stepUIDParameter = stepUID.HasValue ?
                new ObjectParameter("StepUID", stepUID) :
                new ObjectParameter("StepUID", typeof(System.Guid));
    
            var jobUIDParameter = jobUID.HasValue ?
                new ObjectParameter("JobUID", jobUID) :
                new ObjectParameter("JobUID", typeof(System.Guid));
    
            var stepNameParameter = stepName != null ?
                new ObjectParameter("StepName", stepName) :
                new ObjectParameter("StepName", typeof(string));
    
            var moduleUIDParameter = moduleUID.HasValue ?
                new ObjectParameter("ModuleUID", moduleUID) :
                new ObjectParameter("ModuleUID", typeof(System.Guid));
    
            var onSuccessParameter = onSuccess.HasValue ?
                new ObjectParameter("OnSuccess", onSuccess) :
                new ObjectParameter("OnSuccess", typeof(System.Guid));
    
            var onFailureParameter = onFailure.HasValue ?
                new ObjectParameter("OnFailure", onFailure) :
                new ObjectParameter("OnFailure", typeof(System.Guid));
    
            var canRestartParameter = canRestart.HasValue ?
                new ObjectParameter("CanRestart", canRestart) :
                new ObjectParameter("CanRestart", typeof(bool));
    
            var configurationFileParameter = configurationFile != null ?
                new ObjectParameter("ConfigurationFile", configurationFile) :
                new ObjectParameter("ConfigurationFile", typeof(string));
    
            var helpFileParameter = helpFile != null ?
                new ObjectParameter("HelpFile", helpFile) :
                new ObjectParameter("HelpFile", typeof(string));
    
            var isLiveParameter = isLive.HasValue ?
                new ObjectParameter("IsLive", isLive) :
                new ObjectParameter("IsLive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("JobStep_Save", stepUIDParameter, jobUIDParameter, stepNameParameter, moduleUIDParameter, onSuccessParameter, onFailureParameter, canRestartParameter, configurationFileParameter, helpFileParameter, isLiveParameter);
        }
    
        public virtual ObjectResult<JobStepInstance_Get_Result> JobStepInstance_Get(Nullable<System.Guid> stepUID)
        {
            var stepUIDParameter = stepUID.HasValue ?
                new ObjectParameter("StepUID", stepUID) :
                new ObjectParameter("StepUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<JobStepInstance_Get_Result>("JobStepInstance_Get", stepUIDParameter);
        }
    
        public virtual int JobStepInstance_SaveTimes(Nullable<System.Guid> instanceUID, Nullable<System.DateTime> startedOnUtc, Nullable<System.DateTime> completedOnUtc)
        {
            var instanceUIDParameter = instanceUID.HasValue ?
                new ObjectParameter("InstanceUID", instanceUID) :
                new ObjectParameter("InstanceUID", typeof(System.Guid));
    
            var startedOnUtcParameter = startedOnUtc.HasValue ?
                new ObjectParameter("StartedOnUtc", startedOnUtc) :
                new ObjectParameter("StartedOnUtc", typeof(System.DateTime));
    
            var completedOnUtcParameter = completedOnUtc.HasValue ?
                new ObjectParameter("CompletedOnUtc", completedOnUtc) :
                new ObjectParameter("CompletedOnUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("JobStepInstance_SaveTimes", instanceUIDParameter, startedOnUtcParameter, completedOnUtcParameter);
        }
    
        public virtual int JobStepInstance_SetExitCode(Nullable<System.Guid> instanceUID, Nullable<int> exitCode)
        {
            var instanceUIDParameter = instanceUID.HasValue ?
                new ObjectParameter("InstanceUID", instanceUID) :
                new ObjectParameter("InstanceUID", typeof(System.Guid));
    
            var exitCodeParameter = exitCode.HasValue ?
                new ObjectParameter("ExitCode", exitCode) :
                new ObjectParameter("ExitCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("JobStepInstance_SetExitCode", instanceUIDParameter, exitCodeParameter);
        }
    
        public virtual ObjectResult<JobStepInstance_Spawn_Result> JobStepInstance_Spawn(Nullable<System.Guid> stepUID, Nullable<System.Guid> jobInstanceUID)
        {
            var stepUIDParameter = stepUID.HasValue ?
                new ObjectParameter("StepUID", stepUID) :
                new ObjectParameter("StepUID", typeof(System.Guid));
    
            var jobInstanceUIDParameter = jobInstanceUID.HasValue ?
                new ObjectParameter("JobInstanceUID", jobInstanceUID) :
                new ObjectParameter("JobInstanceUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<JobStepInstance_Spawn_Result>("JobStepInstance_Spawn", stepUIDParameter, jobInstanceUIDParameter);
        }
    
        public virtual ObjectResult<JobTimeDuration_Get_Result> JobTimeDuration_Get()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<JobTimeDuration_Get_Result>("JobTimeDuration_Get");
        }
    
        public virtual ObjectResult<JobVersion_GetAllForJob_Result> JobVersion_GetAllForJob(Nullable<System.Guid> jobUID)
        {
            var jobUIDParameter = jobUID.HasValue ?
                new ObjectParameter("JobUID", jobUID) :
                new ObjectParameter("JobUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<JobVersion_GetAllForJob_Result>("JobVersion_GetAllForJob", jobUIDParameter);
        }
    
        public virtual ObjectResult<JobVersion_GetInRange_Result> JobVersion_GetInRange(Nullable<System.DateTime> startAt, Nullable<System.DateTime> endAt)
        {
            var startAtParameter = startAt.HasValue ?
                new ObjectParameter("StartAt", startAt) :
                new ObjectParameter("StartAt", typeof(System.DateTime));
    
            var endAtParameter = endAt.HasValue ?
                new ObjectParameter("EndAt", endAt) :
                new ObjectParameter("EndAt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<JobVersion_GetInRange_Result>("JobVersion_GetInRange", startAtParameter, endAtParameter);
        }
    
        public virtual int Keyword_Delete(Nullable<System.Guid> keywordUID)
        {
            var keywordUIDParameter = keywordUID.HasValue ?
                new ObjectParameter("KeywordUID", keywordUID) :
                new ObjectParameter("KeywordUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Keyword_Delete", keywordUIDParameter);
        }
    
        public virtual ObjectResult<Keyword_Get_Result> Keyword_Get(Nullable<System.Guid> keywordUID)
        {
            var keywordUIDParameter = keywordUID.HasValue ?
                new ObjectParameter("KeywordUID", keywordUID) :
                new ObjectParameter("KeywordUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Keyword_Get_Result>("Keyword_Get", keywordUIDParameter);
        }
    
        public virtual ObjectResult<Keyword_GetAll_Result> Keyword_GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Keyword_GetAll_Result>("Keyword_GetAll");
        }
    
        public virtual int Keyword_Save(Nullable<System.Guid> keywordUID, string keyword, Nullable<System.Guid> categoryUID, string keyValue)
        {
            var keywordUIDParameter = keywordUID.HasValue ?
                new ObjectParameter("KeywordUID", keywordUID) :
                new ObjectParameter("KeywordUID", typeof(System.Guid));
    
            var keywordParameter = keyword != null ?
                new ObjectParameter("Keyword", keyword) :
                new ObjectParameter("Keyword", typeof(string));
    
            var categoryUIDParameter = categoryUID.HasValue ?
                new ObjectParameter("CategoryUID", categoryUID) :
                new ObjectParameter("CategoryUID", typeof(System.Guid));
    
            var keyValueParameter = keyValue != null ?
                new ObjectParameter("KeyValue", keyValue) :
                new ObjectParameter("KeyValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Keyword_Save", keywordUIDParameter, keywordParameter, categoryUIDParameter, keyValueParameter);
        }
    
        public virtual ObjectResult<Nullable<System.Guid>> MarkedForArchive_Get()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.Guid>>("MarkedForArchive_Get");
        }
    
        public virtual ObjectResult<Note_GetByInstance_Result> Note_GetByInstance(Nullable<System.Guid> instanceUID)
        {
            var instanceUIDParameter = instanceUID.HasValue ?
                new ObjectParameter("InstanceUID", instanceUID) :
                new ObjectParameter("InstanceUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Note_GetByInstance_Result>("Note_GetByInstance", instanceUIDParameter);
        }
    
        public virtual int Note_Insert(Nullable<System.Guid> noteUID, Nullable<System.Guid> instanceUID, Nullable<System.Guid> stepUID, Nullable<System.DateTime> createdOnUtc, Nullable<System.Guid> createdBy, string description)
        {
            var noteUIDParameter = noteUID.HasValue ?
                new ObjectParameter("NoteUID", noteUID) :
                new ObjectParameter("NoteUID", typeof(System.Guid));
    
            var instanceUIDParameter = instanceUID.HasValue ?
                new ObjectParameter("InstanceUID", instanceUID) :
                new ObjectParameter("InstanceUID", typeof(System.Guid));
    
            var stepUIDParameter = stepUID.HasValue ?
                new ObjectParameter("StepUID", stepUID) :
                new ObjectParameter("StepUID", typeof(System.Guid));
    
            var createdOnUtcParameter = createdOnUtc.HasValue ?
                new ObjectParameter("CreatedOnUtc", createdOnUtc) :
                new ObjectParameter("CreatedOnUtc", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(System.Guid));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Note_Insert", noteUIDParameter, instanceUIDParameter, stepUIDParameter, createdOnUtcParameter, createdByParameter, descriptionParameter);
        }
    
        public virtual ObjectResult<Operator_CheckIn_Result> Operator_CheckIn(Nullable<System.Guid> operatorUID, string @operator)
        {
            var operatorUIDParameter = operatorUID.HasValue ?
                new ObjectParameter("OperatorUID", operatorUID) :
                new ObjectParameter("OperatorUID", typeof(System.Guid));
    
            var operatorParameter = @operator != null ?
                new ObjectParameter("Operator", @operator) :
                new ObjectParameter("Operator", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Operator_CheckIn_Result>("Operator_CheckIn", operatorUIDParameter, operatorParameter);
        }
    
        public virtual ObjectResult<Operator_Get_Result> Operator_Get(Nullable<System.Guid> operatorUID)
        {
            var operatorUIDParameter = operatorUID.HasValue ?
                new ObjectParameter("OperatorUID", operatorUID) :
                new ObjectParameter("OperatorUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Operator_Get_Result>("Operator_Get", operatorUIDParameter);
        }
    
        public virtual ObjectResult<ProgressIndicator_Get_Result> ProgressIndicator_Get(Nullable<System.Guid> stepInstanceUID, Nullable<byte> indicatorIndex)
        {
            var stepInstanceUIDParameter = stepInstanceUID.HasValue ?
                new ObjectParameter("StepInstanceUID", stepInstanceUID) :
                new ObjectParameter("StepInstanceUID", typeof(System.Guid));
    
            var indicatorIndexParameter = indicatorIndex.HasValue ?
                new ObjectParameter("IndicatorIndex", indicatorIndex) :
                new ObjectParameter("IndicatorIndex", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProgressIndicator_Get_Result>("ProgressIndicator_Get", stepInstanceUIDParameter, indicatorIndexParameter);
        }
    
        public virtual ObjectResult<ProgressIndicator_GetForJob_Result> ProgressIndicator_GetForJob(Nullable<System.Guid> jobUID)
        {
            var jobUIDParameter = jobUID.HasValue ?
                new ObjectParameter("JobUID", jobUID) :
                new ObjectParameter("JobUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProgressIndicator_GetForJob_Result>("ProgressIndicator_GetForJob", jobUIDParameter);
        }
    
        public virtual int ProgressIndicator_Save(Nullable<System.Guid> indicatorUID, Nullable<System.Guid> instanceUID, Nullable<System.Guid> stepInstanceUID, Nullable<byte> indicatorIndex, Nullable<byte> progressStatus, Nullable<byte> percentComplete, Nullable<bool> showProgressBar, string progressMessage)
        {
            var indicatorUIDParameter = indicatorUID.HasValue ?
                new ObjectParameter("IndicatorUID", indicatorUID) :
                new ObjectParameter("IndicatorUID", typeof(System.Guid));
    
            var instanceUIDParameter = instanceUID.HasValue ?
                new ObjectParameter("InstanceUID", instanceUID) :
                new ObjectParameter("InstanceUID", typeof(System.Guid));
    
            var stepInstanceUIDParameter = stepInstanceUID.HasValue ?
                new ObjectParameter("StepInstanceUID", stepInstanceUID) :
                new ObjectParameter("StepInstanceUID", typeof(System.Guid));
    
            var indicatorIndexParameter = indicatorIndex.HasValue ?
                new ObjectParameter("IndicatorIndex", indicatorIndex) :
                new ObjectParameter("IndicatorIndex", typeof(byte));
    
            var progressStatusParameter = progressStatus.HasValue ?
                new ObjectParameter("ProgressStatus", progressStatus) :
                new ObjectParameter("ProgressStatus", typeof(byte));
    
            var percentCompleteParameter = percentComplete.HasValue ?
                new ObjectParameter("PercentComplete", percentComplete) :
                new ObjectParameter("PercentComplete", typeof(byte));
    
            var showProgressBarParameter = showProgressBar.HasValue ?
                new ObjectParameter("ShowProgressBar", showProgressBar) :
                new ObjectParameter("ShowProgressBar", typeof(bool));
    
            var progressMessageParameter = progressMessage != null ?
                new ObjectParameter("ProgressMessage", progressMessage) :
                new ObjectParameter("ProgressMessage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProgressIndicator_Save", indicatorUIDParameter, instanceUIDParameter, stepInstanceUIDParameter, indicatorIndexParameter, progressStatusParameter, percentCompleteParameter, showProgressBarParameter, progressMessageParameter);
        }
    
        public virtual ObjectResult<report_DailyErrorsOverviewArchon2_Result> report_DailyErrorsOverviewArchon2(string jobName)
        {
            var jobNameParameter = jobName != null ?
                new ObjectParameter("JobName", jobName) :
                new ObjectParameter("JobName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<report_DailyErrorsOverviewArchon2_Result>("report_DailyErrorsOverviewArchon2", jobNameParameter);
        }
    
        public virtual int rptArchonAutomatedJobDuration()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("rptArchonAutomatedJobDuration");
        }
    
        public virtual ObjectResult<rptArchonChanges_Result> rptArchonChanges(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptArchonChanges_Result>("rptArchonChanges", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<rptArchonChangesDBO_Result> rptArchonChangesDBO(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptArchonChangesDBO_Result>("rptArchonChangesDBO", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<rptArchonChangesDBO_NEW_Result> rptArchonChangesDBO_NEW(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptArchonChangesDBO_NEW_Result>("rptArchonChangesDBO_NEW", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<rptArchonChangesDBO_Old_Result> rptArchonChangesDBO_Old(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptArchonChangesDBO_Old_Result>("rptArchonChangesDBO_Old", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<rptArchonJobDependencies_Result> rptArchonJobDependencies()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptArchonJobDependencies_Result>("rptArchonJobDependencies");
        }
    
        public virtual ObjectResult<rptArchonJobsSpawned_Result> rptArchonJobsSpawned()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptArchonJobsSpawned_Result>("rptArchonJobsSpawned");
        }
    
        public virtual int rptJobHistoryNotRun()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("rptJobHistoryNotRun");
        }
    
        public virtual ObjectResult<Security_GetRoleMembers_Result> Security_GetRoleMembers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Security_GetRoleMembers_Result>("Security_GetRoleMembers");
        }
    
        public virtual int ServiceCategory_Add(Nullable<System.Guid> serviceUID, Nullable<System.Guid> categoryUID)
        {
            var serviceUIDParameter = serviceUID.HasValue ?
                new ObjectParameter("ServiceUID", serviceUID) :
                new ObjectParameter("ServiceUID", typeof(System.Guid));
    
            var categoryUIDParameter = categoryUID.HasValue ?
                new ObjectParameter("CategoryUID", categoryUID) :
                new ObjectParameter("CategoryUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ServiceCategory_Add", serviceUIDParameter, categoryUIDParameter);
        }
    
        public virtual int ServiceCategory_Delete(Nullable<System.Guid> serviceUID, Nullable<System.Guid> categoryUID)
        {
            var serviceUIDParameter = serviceUID.HasValue ?
                new ObjectParameter("ServiceUID", serviceUID) :
                new ObjectParameter("ServiceUID", typeof(System.Guid));
    
            var categoryUIDParameter = categoryUID.HasValue ?
                new ObjectParameter("CategoryUID", categoryUID) :
                new ObjectParameter("CategoryUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ServiceCategory_Delete", serviceUIDParameter, categoryUIDParameter);
        }
    
        public virtual ObjectResult<Nullable<System.Guid>> ServiceCategory_Get(Nullable<System.Guid> serviceUID)
        {
            var serviceUIDParameter = serviceUID.HasValue ?
                new ObjectParameter("ServiceUID", serviceUID) :
                new ObjectParameter("ServiceUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.Guid>>("ServiceCategory_Get", serviceUIDParameter);
        }
    
        public virtual int ServiceModule_Add(Nullable<System.Guid> serviceUID, Nullable<System.Guid> moduleUID)
        {
            var serviceUIDParameter = serviceUID.HasValue ?
                new ObjectParameter("ServiceUID", serviceUID) :
                new ObjectParameter("ServiceUID", typeof(System.Guid));
    
            var moduleUIDParameter = moduleUID.HasValue ?
                new ObjectParameter("ModuleUID", moduleUID) :
                new ObjectParameter("ModuleUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ServiceModule_Add", serviceUIDParameter, moduleUIDParameter);
        }
    
        public virtual int ServiceModule_Delete(Nullable<System.Guid> serviceUID, Nullable<System.Guid> moduleUID)
        {
            var serviceUIDParameter = serviceUID.HasValue ?
                new ObjectParameter("ServiceUID", serviceUID) :
                new ObjectParameter("ServiceUID", typeof(System.Guid));
    
            var moduleUIDParameter = moduleUID.HasValue ?
                new ObjectParameter("ModuleUID", moduleUID) :
                new ObjectParameter("ModuleUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ServiceModule_Delete", serviceUIDParameter, moduleUIDParameter);
        }
    
        public virtual ObjectResult<Nullable<System.Guid>> ServiceModule_Get(Nullable<System.Guid> serviceUID)
        {
            var serviceUIDParameter = serviceUID.HasValue ?
                new ObjectParameter("ServiceUID", serviceUID) :
                new ObjectParameter("ServiceUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.Guid>>("ServiceModule_Get", serviceUIDParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<StatusChange_GetByInstance_Result> StatusChange_GetByInstance(Nullable<System.Guid> instanceUID)
        {
            var instanceUIDParameter = instanceUID.HasValue ?
                new ObjectParameter("InstanceUID", instanceUID) :
                new ObjectParameter("InstanceUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StatusChange_GetByInstance_Result>("StatusChange_GetByInstance", instanceUIDParameter);
        }
    
        public virtual int StatusChange_Insert(Nullable<System.Guid> jobUID, Nullable<System.Guid> changeUID, Nullable<System.Guid> instanceUID, Nullable<byte> overallStatus, Nullable<System.Guid> stepUID, Nullable<byte> stepStatus, Nullable<System.Guid> restartFrom, Nullable<System.DateTime> occurredAtUtc, Nullable<bool> markStart, Nullable<bool> markComplete, Nullable<bool> markVerified, Nullable<bool> markHasCompleted, Nullable<System.Guid> changedBy)
        {
            var jobUIDParameter = jobUID.HasValue ?
                new ObjectParameter("JobUID", jobUID) :
                new ObjectParameter("JobUID", typeof(System.Guid));
    
            var changeUIDParameter = changeUID.HasValue ?
                new ObjectParameter("ChangeUID", changeUID) :
                new ObjectParameter("ChangeUID", typeof(System.Guid));
    
            var instanceUIDParameter = instanceUID.HasValue ?
                new ObjectParameter("InstanceUID", instanceUID) :
                new ObjectParameter("InstanceUID", typeof(System.Guid));
    
            var overallStatusParameter = overallStatus.HasValue ?
                new ObjectParameter("OverallStatus", overallStatus) :
                new ObjectParameter("OverallStatus", typeof(byte));
    
            var stepUIDParameter = stepUID.HasValue ?
                new ObjectParameter("StepUID", stepUID) :
                new ObjectParameter("StepUID", typeof(System.Guid));
    
            var stepStatusParameter = stepStatus.HasValue ?
                new ObjectParameter("StepStatus", stepStatus) :
                new ObjectParameter("StepStatus", typeof(byte));
    
            var restartFromParameter = restartFrom.HasValue ?
                new ObjectParameter("RestartFrom", restartFrom) :
                new ObjectParameter("RestartFrom", typeof(System.Guid));
    
            var occurredAtUtcParameter = occurredAtUtc.HasValue ?
                new ObjectParameter("OccurredAtUtc", occurredAtUtc) :
                new ObjectParameter("OccurredAtUtc", typeof(System.DateTime));
    
            var markStartParameter = markStart.HasValue ?
                new ObjectParameter("MarkStart", markStart) :
                new ObjectParameter("MarkStart", typeof(bool));
    
            var markCompleteParameter = markComplete.HasValue ?
                new ObjectParameter("MarkComplete", markComplete) :
                new ObjectParameter("MarkComplete", typeof(bool));
    
            var markVerifiedParameter = markVerified.HasValue ?
                new ObjectParameter("MarkVerified", markVerified) :
                new ObjectParameter("MarkVerified", typeof(bool));
    
            var markHasCompletedParameter = markHasCompleted.HasValue ?
                new ObjectParameter("MarkHasCompleted", markHasCompleted) :
                new ObjectParameter("MarkHasCompleted", typeof(bool));
    
            var changedByParameter = changedBy.HasValue ?
                new ObjectParameter("ChangedBy", changedBy) :
                new ObjectParameter("ChangedBy", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("StatusChange_Insert", jobUIDParameter, changeUIDParameter, instanceUIDParameter, overallStatusParameter, stepUIDParameter, stepStatusParameter, restartFromParameter, occurredAtUtcParameter, markStartParameter, markCompleteParameter, markVerifiedParameter, markHasCompletedParameter, changedByParameter);
        }
    
        public virtual int TargetService_Add(Nullable<System.Guid> jobUID, Nullable<System.Guid> serviceUID)
        {
            var jobUIDParameter = jobUID.HasValue ?
                new ObjectParameter("JobUID", jobUID) :
                new ObjectParameter("JobUID", typeof(System.Guid));
    
            var serviceUIDParameter = serviceUID.HasValue ?
                new ObjectParameter("ServiceUID", serviceUID) :
                new ObjectParameter("ServiceUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TargetService_Add", jobUIDParameter, serviceUIDParameter);
        }
    
        public virtual int TargetService_Delete(Nullable<System.Guid> jobUID, Nullable<System.Guid> serviceUID)
        {
            var jobUIDParameter = jobUID.HasValue ?
                new ObjectParameter("JobUID", jobUID) :
                new ObjectParameter("JobUID", typeof(System.Guid));
    
            var serviceUIDParameter = serviceUID.HasValue ?
                new ObjectParameter("ServiceUID", serviceUID) :
                new ObjectParameter("ServiceUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TargetService_Delete", jobUIDParameter, serviceUIDParameter);
        }
    
        public virtual ObjectResult<Nullable<System.Guid>> TargetService_Get(Nullable<System.Guid> jobUID)
        {
            var jobUIDParameter = jobUID.HasValue ?
                new ObjectParameter("JobUID", jobUID) :
                new ObjectParameter("JobUID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.Guid>>("TargetService_Get", jobUIDParameter);
        }
    
        public virtual int Util_GetMarkupWires(Nullable<int> coreID)
        {
            var coreIDParameter = coreID.HasValue ?
                new ObjectParameter("CoreID", coreID) :
                new ObjectParameter("CoreID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Util_GetMarkupWires", coreIDParameter);
        }
    }
}
